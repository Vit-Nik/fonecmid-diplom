 
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий  

Процедура ОбработкаПроведения(Отказ, Режим)
	
	АбонентскийДоговор = (Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбоненскоеОбслуживание);
	ДействующийДоговор = (Дата >= Договор.ВКМ_НачалоПериодаДействия И Дата <= Договор.ВКМ_ОкончаниеПериодаДействия);
	
	Если АбонентскийДоговор И ДействующийДоговор Тогда
		
		// регистр ВКМ_ВыполненныеКлиентуРаботы Приход
		Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;
		Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Клиент = Клиент;
		Движение.Договор = Договор;
		Движение.КоличествоЧасов = ВыполненныеРаботы.Итог("ЧасыКОплатеКлиенту");
		Движение.СуммаКОплате = Движение.КоличествоЧасов * Договор.ВКМ_СтоимостьЧаса;
		
		// регистр ВКМ_ВыполненныеСотрудникомРаботы Приход
		Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записывать = Истина;
		Движение = Движения.ВКМ_ВыполненныеСотрудникомРаботы.Добавить();
		Движение.Период = Дата;
		Движение.Сотрудник = Специалист;
		Движение.ЧасовКОплате = ВыполненныеРаботы.Итог("ЧасыКОплатеКлиенту");
		
		ПроцентПремии = ПроцентПремииСотрудника(Движение.Сотрудник, Движение.Период);
		
		Если ПроцентПремии <> Неопределено Тогда
			Движение.СуммаКОплате = Движение.ЧасовКОплате * Договор.ВКМ_СтоимостьЧаса * ПроцентПремии / 100; 
		Иначе
			ОбщегоНазначения.СообщитьПользователю("Специалисту не установлен процент премии. проведение не возможно!");
			Отказ = Истина;
		КонецЕсли;
		
	Иначе 
				
		Если НЕ АбонентскийДоговор Тогда
			ОбщегоНазначения.СообщитьПользователю("Выбранный договор не является абонентским договором. Проведение невозможно",, "Объект.Договор");
		КонецЕсли;
		
		Если НЕ ДействующийДоговор Тогда
			ОбщегоНазначения.СообщитьПользователю("Дата документа выходит за период действия договора. Проведение невозможно");
		КонецЕсли;
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	
КонецПроцедуры 

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Исполнитель = Специалист;
		ДатаРабот = ДатаПроведенияРабот;
		ВремяНачалаРабот = ВремяНачалаРаботПлан;
		
		ТекстСообщения = СтрШаблон("Создан новый документ обслуживание клиента. Исполнитель %1, дата исполнения %2, время начала работ %3",
		Исполнитель, Формат(ДатаРабот, "ДФ=dd.MM.yyyy;"), Формат(ВремяНачалаРабот, "ДЛФ=T;"));
		
		ДобавитьВСправочникУведомленияТГБотТекстСообщения(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЭтоНовый() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ОбслуживаниеКлиента.Представление КАК Документ,
		|	ВКМ_ОбслуживаниеКлиента.ДатаПроведенияРабот КАК ДатаРабот,
		|	ВКМ_ОбслуживаниеКлиента.ВремяНачалаРаботПлан КАК ВремяНачала,
		|	ВКМ_ОбслуживаниеКлиента.Специалист КАК Специалист
		|ИЗ
		|	Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента
		|ГДЕ
		|	ВКМ_ОбслуживаниеКлиента.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДокументОбслуживания = Выборка.Документ;
			ДатаРабот = Выборка.ДатаРабот;
			ВремяНачала = Выборка.ВремяНачала;
			Специалист1 = Выборка.Специалист;
		КонецЦикла;
		
		Если ДатаПроведенияРабот <> ДатаРабот Тогда
			ТекстСообщения = СтрШаблон("В документе обслуживания %1 изменена дата проведения работ. Новая дата %2",
			ДокументОбслуживания, Формат(ДатаПроведенияРабот, "ДФ=dd.MM.yyyy"));
			ДобавитьВСправочникУведомленияТГБотТекстСообщения(ТекстСообщения);
		КонецЕсли;
		
		Если ВремяНачалаРаботПлан <> ВремяНачала Тогда
			ТекстСообщения = СтрШаблон("В документе обслуживания %1 изменено время начала работ. Новое время %2",
		    ДокументОбслуживания, Формат(ВремяНачалаРаботПлан, "ДЛФ=T"));
			ДобавитьВСправочникУведомленияТГБотТекстСообщения(ТекстСообщения);
		КонецЕсли;
		
		Если Специалист <> Специалист1 Тогда
			ТекстСообщения = СтрШаблон("В документе обслуживания %1 изменен исполнитель. Новый исполнитель %2",
			ДокументОбслуживания, Специалист);
			ДобавитьВСправочникУведомленияТГБотТекстСообщения(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроцентПремииСотрудника(Специалист, Дата)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_УсловияОплатыСотрудников.ПроцентОтРабот КАК ПроцентОтРабот
		|ИЗ
		|	РегистрСведений.ВКМ_УсловияОплатыСотрудников КАК ВКМ_УсловияОплатыСотрудников
		|ГДЕ
		|	ВКМ_УсловияОплатыСотрудников.Период = НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
		|	И ВКМ_УсловияОплатыСотрудников.Сотрудник = &Специалист";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Специалист", Специалист);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Выборка.Следующий();
		Возврат Выборка.ПроцентОтРабот;
	КонецЕсли;

КонецФункции

Процедура ДобавитьВСправочникУведомленияТГБотТекстСообщения(ТекстСообщения)
	
	НовыйЭлемент = Справочники.ВКМ_УведомленияТГБот.СоздатьЭлемент();
	НовыйЭлемент.ТекстСообщения = ТекстСообщения;
	НовыйЭлемент.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли	


